input AddCoinInput {
  symbol: String!
  executeOrder: Boolean!
  generateSignal: Boolean!
  sendEmail: Boolean!
}

input AddCredentialsInput {
  binanceKey: String!
  binanceSecretKey: String!
}

input AddPromptInput {
  role: String!
  prompt: String!
  enabled: Boolean!
}

input AddSettingInput {
  email: String!
}

type Coin {
  id: ID
  symbol: String
  userId: String
  executeOrder: Boolean
  generateSignal: Boolean
  sendEmail: Boolean
}

type Credentials {
  userId: String
  binanceKey: String
  binanceSecretKey: String
}

input DeleteCoinInput {
  id: ID!
}

input DeletePromptInput {
  id: ID!
}

type Order {
  id: String
  userId: String
  date: String
  quantity: String
  quoteOrderQty: String
  side: String
  symbol: String
}

type Prompt {
  id: ID
  userId: String
  role: String
  prompt: String
  enabled: Boolean
}

type Setting {
  userId: String
  sendEmails: Boolean
  generateSignals: Boolean
  executeOrders: Boolean
  aiProvider: String
  aiModel: String
  effort: String
  maxTokens: Int
  startTime: Int
  stableCoin: String
  onHoldAction: String
  confidenceToBuy: String
  confidenceToSell: String
  email: String
  includeBalances: Boolean
  includeLiveData: Boolean
  balanceUtilization: Int
}

type Signal {
  id: String
  userId: String
  action: String
  coin: String
  confidence: Int
  date: String
  reason: String
}

input UpdateCoinInput {
  id: ID!
  symbol: String!
  executeOrder: Boolean!
  generateSignal: Boolean!
  sendEmail: Boolean!
}

input UpdatePromptInput {
  id: ID!
  role: String!
  prompt: String!
  enabled: Boolean!
}

input UpdateSettingInput {
  sendEmails: Boolean
  generateSignals: Boolean
  executeOrders: Boolean
  aiProvider: String
  aiModel: String
  effort: String
  maxTokens: Int
  startTime: Int
  stableCoin: String
  onHoldAction: String
  confidenceToBuy: String
  confidenceToSell: String
  email: String
  includeBalances: Boolean
  includeLiveData: Boolean
  balanceUtilization: Int
}

type Mutation {
  addCoin(input: AddCoinInput!): Coin!
  updateCoin(input: UpdateCoinInput!): Boolean!
  deleteCoin(input: DeleteCoinInput!): Boolean!
  addPrompt(input: AddPromptInput!): Prompt!
  deletePrompt(input: DeletePromptInput!): Boolean!
  updatePrompt(input: UpdatePromptInput!): Boolean!
  addSetting(input: AddSettingInput!): Setting!
  updateSetting(input: UpdateSettingInput!): Boolean!
  addCredentials(input: AddCredentialsInput): Boolean!
  deleteCredentials: Boolean!
}

type Query {
  getCoins: [Coin]
  getPrompts: [Prompt]
  getSetting: Setting
  isCredentialsExists: Boolean
  getOrders: [Order]
  getSignals: [Signal]
}

schema {
  query: Query
  mutation: Mutation
}
